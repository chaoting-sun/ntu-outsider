type Query {
  chatBox(name1: ID!, name2: ID!): ChatBox!
  user(name: String!): [User!]
  # Title of the post contains the word.
  postByTitle(title: String!): [Post!]!
  # The post contains the tag.
  postByTag(tag: String!): [Post!]!
  
}

scalar DateTime # ref: https://v1.prisma.io/forum/t/couldnt-find-type-datetime-in-any-of-the-schemas/4310/3
# 新增 author
type Post {
  postId: ID!
  userId: ID!
  author: User!
  title: String!
  classId: ID!
  class: Class!
  content: String!
  condition: String
  deadline: DateTime! # 先暫時用 scalar 做某種轉換，還找不到其他更好的 DateTime 表示法
  tag: [String]
  comments: [Comment]
}

type User {
  userId: ID!
  name: String!
  password: String!
  email: String!
  preference: [String!]
  collectionName: [String!]
}

type Comment {
  commentId: ID!
  postId: ID!
  userId: ID!
  commenter: User!
  content: String!
}

type Class {
  classId: ID!
  classNumber: String!
  className: String!
}

type ChatBox {
  name: String!
  messages: [Message!]
}

type Message {
  sender: String!
  body: String!
}

type Mutation {
  createUser(name: String!, email: String!, password: String!): User!
  updateUser(
    userId: ID!
    name: String!
    email: String!
    password: String!
  ): User!
  deleteUser(userId: ID!): User!

  createPost(
    userId: ID!
    classNumber: String!
    className: String!
    title: String!
    content: String!
    condition: String!
    deadline: DateTime!
  ): Post!
  # update 的內容需要包含 ID、內文、文章徵人狀態、徵人截止期限
  updatePost(
    postId: ID!
    content: String!
    condition: String!
    deadline: DateTime!
  ): Post!
  deletePost(postId: ID!): Post!
  updatePreference(userId: ID!, preference: [String!]): User!
  updateCollection(userId: ID!, collectionName: [String!]): User!

  createComment(postId: ID!, userId: ID!, content: String!): Comment!
  updateComment(commentId: ID!, content: String!): Comment!
  deleteComment(commentId: ID!): Comment!

  createMessage(name: ID!, to: ID!, body: String!): Message!
  # updateMessage: Comment!
  # deleteMessage: Comment!
}

# type Subscription {

# }
