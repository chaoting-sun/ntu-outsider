type User {
  _id: ID!
  account: String!
  name: String!
  password: String!
  postCollection: [ID]
  chatboxes: [ID]
}

type ChatBox {
  name: String!
  namesOfTalkers: [String!]
  messages: [Message]
}

type Message {
  sender: String!
  body: String!
}

type Post {
  _id: ID!
  userId: ID!
  author: User!
  title: String!
  classNo: String!
  className: String!
  teacherName: String!
  content: String!
  condition: Int!
  deadline: String!
  tag: [String]
}

type AuthPayload {
  userId: String!
  account: String!
  name: String!
}

type LogoutPayload {
  msg: String!
}

type ValidationError {
  path: String!
  report: String!
}

type ServerError {
  report: String!
}

union AccountResult = User | ValidationError | ServerError

type Query {
  user(name: String!): [User!] # for backend checking not used in frontend
  post(postId: String!): Post! # for backend checking not used in frontend
  queryChatBox(name1: ID!, name2: ID!): ChatBox
  queryChatBoxes(userId: ID!): [ChatBox]
  queryUser(account: String!, password: String!): AccountResult!
  queryPost(type: String!, queryString: String!): [Post]
  queryPostCollection(userId: String!, type: String!): [Post]
}

type Mutation {
  # old
  createAccount(
    account: String!
    name: String!
    password: String!
  ): AccountResult!
  # new
  signUp(account: String!, name: String!, password: String!): AuthPayload
  login(account: String!, password: String!): AuthPayload
  logout: LogoutPayload

  updateUser(userId: ID!, name: String!, account: String!): User!
  updatePassword(userId: ID!, oldPassword: String!, newPassword: String!): User
  deleteUser(userId: ID!): User!

  createPost(
    userId: ID!
    title: String!
    classNo: String!
    className: String!
    teacherName: String!
    content: String!
    condition: Int!
    deadline: String!
    tag: [String]
  ): Post
  updatePost(
    postId: ID!
    title: String!
    classNo: String!
    className: String!
    teacherName: String!
    content: String!
    condition: Int!
    deadline: String!
    tag: [String]
  ): Post!
  deletePost(postId: ID!): Post!
  updatePostCollection(userId: ID!, postId: ID!): User!

  createChatBox(name: ID!, to: ID!): ChatBox!
  createMessage(name: ID!, to: ID!, message: String!): Message!
}

type Subscription {
  subscribeChatBox(id: ID!): ChatBox!
  subscribeMessage(id: ID!): MessageSubscriptionPayload!
}

type MessageSubscriptionPayload {
  chatBoxName: String!
  message: Message!
}
